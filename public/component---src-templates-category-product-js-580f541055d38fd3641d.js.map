{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/CategoryProductItems.js","webpack://gatsby-starter-default/./src/templates/category-product.js"],"names":["products","allProducts","useStaticQuery","nodes","useState","slice","list","setList","loadMore","setLoadMore","length","hasMore","setHasMore","useEffect","currentLength","nextResults","isMore","className","item","window","localStorage","getItem","setItem","colProduct","map","article","i","onClick","pageContext","acf_banners","ifBanner","Link","to","linkUrl","url","src","banner","sourceUrl","alt","bannerTitle","NavBar","CategoryProductItems"],"mappings":"yPAsHA,EAjHqB,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SAgDbC,IA1COC,oBAAe,cA0CRF,EAASG,OAG7B,GAAwBC,eAAS,OAAIH,EAAYI,MAAM,EARzC,KAQPC,EAAP,KAAaC,EAAb,KAGA,GAAgCH,eAAS,GAAlCI,EAAP,KAAiBC,EAAjB,KAGA,GAA8BL,cAASH,EAAYS,OAdrC,GAcPC,EAAP,KAAgBC,EAAhB,KAqCA,OA7BAC,gBAAU,WACN,GAAIL,GAAYG,EAAS,CACrB,IAAMG,EAAgBR,EAAKI,OAErBK,EADSD,EAAgBb,EAAYS,OAErCT,EAAYI,MAAMS,EAAeA,EA3BjC,GA4BA,GACNP,EAAQ,GAAD,eAAKD,IAAL,OAAcS,KACrBN,GAAY,MAEjB,CAACD,EAAUG,KAGdE,gBAAU,WACN,IAAMG,EAASV,EAAKI,OAAST,EAAYS,OACzCE,EAAWI,KACZ,CAACV,IAcA,uBAAKW,UAAS,8BAZlB,SAAoBC,GAChB,IAAuB,IAAlB,IAAQA,GAET,MAAO,mBAAqBC,QAAW,aAAiBC,aAAaC,QAAQ,cAG3D,oBAAXF,QAA4BC,aAAaE,QAAQ,aAAc,KAM3BC,CAA8B,oBAAXJ,QAA2BC,aAAaC,QAAQ,eAApG,KAETf,EAAKkB,KAAI,SAACC,EAASC,GAAV,OACN,gBAAC,IAAD,CAASD,QAASA,OAGrBd,EACG,uBAAKM,UAAU,2BACX,0BAAQA,UAAU,uBAAuBU,QA3ClC,WACnBlB,GAAY,KA0CA,iBAGJ,uBAAKQ,UAAU,a,UCzG/B,WAAe,OAAEW,EAAF,EAAEA,YAAF,OACX,gBAAC,KAAD,MAE2C,IAArCA,EAAYC,YAAYC,UAC1B,uBAAKb,UAAU,UACX,gBAAC,EAAAc,KAAD,CAAMC,GAAE,GAAKJ,EAAYC,YAAYI,QAAQC,KACzC,uBAAKC,IAAKP,EAAYC,YAAYO,OAAOC,UAAWC,IAAI,KACxD,uBAAKrB,UAAU,aACX,uBAAKA,UAAU,kBACVW,EAAYC,YAAYU,gBASzC,uBAAKtB,UAAU,kBAEX,gBAACuB,EAAA,EAAD,MAIA,gBAACC,EAAD,CAAsBzC,SAAU4B,EAAY5B","file":"component---src-templates-category-product-js-580f541055d38fd3641d.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {graphql, Link, useStaticQuery} from 'gatsby';\r\nimport Product from \"../components/products-item\"\r\nimport {isEmpty} from \"lodash\";\r\n\r\nconst ProductItems = ({products}) => {\r\n\r\n    // console.log('props', catID);\r\n    //\r\n    // const cId = 'dGVybToxODc='\r\n\r\n    const data = useStaticQuery(graphql` \r\n    {\r\n                allWpProduct {\r\n                  edges {\r\n                    node {\r\n                      id\r\n                      name\r\n                      sku\r\n                      onSale\r\n                      productCategories {\r\n                        nodes {\r\n                          name\r\n                          slug\r\n                          id\r\n                        }\r\n                      }\r\n                      ... on WpVariableProduct {\r\n                        price\r\n                        salePrice\r\n                        name\r\n                      }\r\n                      image {\r\n                        mediaDetails {\r\n                          sizes {\r\n                            sourceUrl\r\n                            name\r\n                          }\r\n                        }\r\n                        mediaItemUrl\r\n                      }\r\n                      slug\r\n                    }\r\n                  }\r\n                }\r\n    }\r\n  `)\r\n\r\n    const count = 4\r\n\r\n    // Array of all news articles\r\n    //const allProducts = data.allWpProduct.edges\r\n\r\n    const allProducts = products.nodes\r\n\r\n    // State for the list\r\n    const [list, setList] = useState([...allProducts.slice(0, count )])\r\n\r\n    // State to trigger oad more\r\n    const [loadMore, setLoadMore] = useState(false)\r\n\r\n    // State of whether there is more to load\r\n    const [hasMore, setHasMore] = useState(allProducts.length > count )\r\n\r\n    // Load more button click\r\n    const handleLoadMore = () => {\r\n        setLoadMore(true)\r\n    }\r\n\r\n    // Handle loading more articles\r\n    useEffect(() => {\r\n        if (loadMore && hasMore) {\r\n            const currentLength = list.length\r\n            const isMore = currentLength < allProducts.length\r\n            const nextResults = isMore\r\n                ? allProducts.slice(currentLength, currentLength + count )\r\n                : []\r\n            setList([...list, ...nextResults])\r\n            setLoadMore(false)\r\n        }\r\n    }, [loadMore, hasMore]) //eslint-disable-line\r\n\r\n    //Check if there is more\r\n    useEffect(() => {\r\n        const isMore = list.length < allProducts.length\r\n        setHasMore(isMore)\r\n    }, [list]) //eslint-disable-line\r\n\r\n    function colProduct(item) {\r\n        if ( isEmpty(item) === false ) {\r\n            //console.log('isEmpty', true);\r\n            return 'row-cols-' + typeof window !== 'undefined' && ( localStorage.getItem('colProduct') );\r\n        } else {\r\n            //console.log('isEmpty', false);\r\n            typeof window !== 'undefined' && ( localStorage.setItem('colProduct', '2') );\r\n        }\r\n        //console.log( 'isEmpty---', isEmpty(item) )\r\n    }\r\n\r\n    return (\r\n        <div className={` row box-products row-cols-${ colProduct( typeof window !== 'undefined' && (localStorage.getItem('colProduct') ) ) } `}>\r\n\r\n            {list.map((article, i) => (\r\n                <Product article={article} />\r\n                //<div>{i}</div>\r\n            ))}\r\n            {hasMore ? (\r\n                <div className=\"col-12 text-center mt-3\">\r\n                    <button className=\"btn style-2 max-w700\" onClick={handleLoadMore}>показать еще</button>\r\n                </div>\r\n            ) : (\r\n                <div className=\"col-12\">\r\n                    {/*<p>No more results</p>*/}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default ProductItems\r\n\r\n","import React from \"react\"\r\nimport Layout from \"../components/layout\";\r\nimport CategoryProductItems from \"../components/CategoryProductItems\";\r\nimport {Link} from \"gatsby\";\r\nimport NavBar from \"../components/NavBar\";\r\n\r\nexport default ({pageContext}) => (\r\n    <Layout>\r\n\r\n        { pageContext.acf_banners.ifBanner === true &&\r\n        <div className=\"banner\">\r\n            <Link to={`${pageContext.acf_banners.linkUrl.url}`}>\r\n                <img src={pageContext.acf_banners.banner.sourceUrl} alt=\"\"/>\r\n                <div className=\"container\">\r\n                    <div className=\"content-banner\">\r\n                        {pageContext.acf_banners.bannerTitle}\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n        }\r\n\r\n\r\n\r\n        <div className=\"container mt-3\">\r\n\r\n            <NavBar />\r\n\r\n            {/*<ProductItems catID={pageContext.id} />*/}\r\n\r\n            <CategoryProductItems products={pageContext.products} />\r\n\r\n            {/*{<pre>{JSON.stringify(pageContext.acf_banners, null, 4)}</pre>}*/}\r\n        </div>\r\n\r\n    </Layout>\r\n);"],"sourceRoot":""}